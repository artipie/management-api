{{#partial "content"}}

<p>
  This is <a href="https://yaml.org/">YAML</a> config
  of your repository <code>{{user}}/{{name}}</code>
  (read this
  <a href="https://github.com/artipie/artipie/blob/master/README.md">README</a>
  file to get help):
</p>

<form id="config-form" action="/api/repos/{{user}}" method="POST">
  <fieldset>
    <textarea id="repo-config" name="config" class="monospace" type="textarea" style="width: 100%; height: 12em;"
>{{#if config}}
{{config}}
{{else}}
repo:
  type: {{type}}
  storage: default{{#eq type "maven-proxy"}}
  # proxy for Apache Maven central
  remotes:
    - uri: https://repo.maven.apache.org/maven2
      cache:
        storage: default{{/eq}}{{#eq type "maven-group"}}
  settings:
    repositories:
      - {{user}}/mprivate1
      - {{user}}/mprivate2
      - {{user}}/mproxy{{/eq}}
  permissions:
    {{user}}:
      - upload
      - download
    "*":
      - download
{{/if}}</textarea>
    <input name="repo" type="hidden" value="{{name}}"/>
    <input name="action" type="hidden" value="update"/>
    <input id="config-submit" type="submit" value="Update"/>
  </fieldset>
</form>

<form id="repo-delete-form" action="/api/repos/{{user}}" method="POST">
    <fieldset>
        <input name="repo" type="hidden" value="{{name}}"/>
        <input name="action" type="hidden" value="delete"/>
        <input id="repo-delete" type="submit" value="Delete"/>
    </fieldset>
</form>

{{#eq type "maven"}}
<p>With this confirmation,
the GitHub user <a href="https://github.com/{{user}}"><code>@{{user}}</code></a>
will be able to publish Maven artifacts and all other users will be able to download.</p>

<p>This is how you may configure it inside your
<a href="https://maven.apache.org/guides/introduction/introduction-to-the-pom.html"><code>pom.xml</code></a>:</p>

<pre>&lt;project&gt;
  [...]
  &lt;distributionManagement&gt;
    &lt;snapshotRepository&gt;
      &lt;id&gt;artipie&lt;/id&gt;
      &lt;url&gt;https://central.artipie.com/{{user}}/{{name}}&lt;/url&gt;
    &lt;/snapshotRepository&gt;
    &lt;repository&gt;
      &lt;id&gt;artipie&lt;/id&gt;
      &lt;url&gt;https://central.artipie.com/{{user}}/{{name}}&lt;/url&gt;
    &lt;/repository&gt;
  &lt;/distributionManagement&gt;
  &lt;repositories&gt;
    &lt;repository&gt;
      &lt;id&gt;artipie&lt;/id&gt;
      &lt;url&gt;https://central.artipie.com/{{user}}/{{name}}&lt;/url&gt;
    &lt;/repository&gt;
  &lt;/repositories&gt;
&lt;/project&gt;</pre>

<p>You publish just with
<a href="https://maven.apache.org/plugins/maven-deploy-plugin/usage.html"><code>mvn deploy</code></a>
and you download with
<a href="https://maven.apache.org/plugins/maven-compiler-plugin/index.html"><code>mvn compile</code></a>.
{{/eq}}{{#eq type "maven-proxy"}}
<p>Maven proxy repository proxies all request to remote Maven repository appling authentication
and saves artifacts in Artipie storage cache.</p>
<p>To use it as a mirror for Apache central, add this configuration to your
<code>~/.m2/settings.xml</code>:
<pre>
&lt;settings&gt;
  [...]
  &lt;mirrors&gt;
    &lt;mirror&gt;
      &lt;id&gt;artipie-mirror&lt;/id&gt;
      &lt;name&gt;Artipie Mirror Repository&lt;/name&gt;
      &lt;url&gt;https://central.artipie.com/{{user}}/{{repo}}&lt;/url&gt;
      &lt;mirrorOf&gt;central&lt;/mirrorOf&gt;
    &lt;/mirror&gt;
  &lt;/mirrors&gt;
&lt;/settings&gt;
</pre>
</p>
{{/eq}}{{#eq type "docker"}}
<p>Tag your image with <code>central.artipie.com/{{user}}/{{repo}}</code> image prefix,
and push it to central.artipie.com then. E.g.
for <code>alpine:3.11</code> use:
<pre>
docker tag alpine:3.11 central.artipie.com/{{user}}/{{repo}}alpine:3.11
docker push central.artipie.com/{{user}}/{{repo}}alpine:3.11
</pre>
</p>
{{/eq}}
{{#eq type "maven-group"}}
<p>To use Maven grouped (virtual) repository first create at least two Maven or Maven proxy repositories.
It can be either just a Maven repository or Maven proxy (mirror) repository. Then specify
<code>https://central.artipie.com/{{user}}/{{repo}}</code> as distribution management, or
repositories in <code>pom.xml</code> or as a mirror in <code>settings.xml</code> (see
more details in concrete repositories documentation). Then group repositories under
group-settings, pay attention that order does matter: first repository in the list will be
accessed first, then second, etc. Repository name should be fully formatted, include your username
prefix, e.g. <code>{{user}}/maven</code>.</p>
{{/eq}}{{#eq type "file"}}
<p>It's just a binary files repository. Use <code>PUT</code> HTTP request to upload a file,
and <code>GET</code> for downloading.</p>
<p>E.g. using <a href="https://httpie.org/">HTTPie</a> CLI tool:
<pre>
# uploading file.bin
http -a {{user}}:password PUT https://central.artipie.com/{{user}}/{{repo}}file.bin @file.bin
# downloading file.bin
http GET https://central.artipie.com/{{user}}/{{repo}}file.bin --output=./file.bin
</pre>
{{/eq}}{{#eq type "pypi"}}
To publish your packages with <a href="https://packaging.python.org/tutorials/packaging-projects/#uploading-the-distribution-archives">twine</a>
specify Artipie repository url with <code>--repository-url</code> option
<pre>
$ twine upload --repository-url http://central.artipie.com/{{user}}/{{name}}/ -u {{user}} -p password myproject/dist/*
</pre>
To install package with <code>pip install</code> specify Artipie repository url with <code>--index-url</code> option:
<pre>
$ pip install --index-url http://{{user}}:password@central.artipie.com/{{user}}/{{name}}/ myproject
</pre>
{{/eq}}{{#eq type "deb"}}
Add local repository to the list of Debian packages for <code>apt</code> by adding
the following line to the <code>/etc/apt/sources.list</code>:
<pre>
deb [trusted=yes] http://{{user}}:password@central.artipie.com/{{user}}/{{name}} {{name}} main
</pre>
Then use <code>apt-get</code> as usual.
{{/eq}}{{#eq type "go"}}
To use <code>go</code> repository declare the following environment variables:
<pre>
export GO111MODULE=on
export GOPROXY="central.artipie.com/{{user}}/{{name}}"
</pre>
Now you can install packages directly from Artipie:
<pre>
go get -x -insecure golang.org/x/time
</pre>
{{/eq}}{{#eq type "rpm"}}
To install packages from <code>rpm</code> Artipie repository, add the following file
to <code>yum</code> settings by path <code>/etc/yum.repos.d/example.repo</code>:
<pre>
[example]
name=Example Repository
baseurl=http://{{user}}:password@central.artipie.com/{{user}}/{{name}}
enabled=1
gpgcheck=0
</pre>
Then <code>list</code> and <code>install</code> packages with specified repository:
<pre>
yum -y repo-pkgs example list
yum -y repo-pkgs example install
</pre>
{{/eq}}{{#eq type "conda"}}
To install conda packages from Artipie, add repository to conda channels settings to <code>/root/.condarc</code> file (check
<a href="https://conda.io/projects/conda/en/latest/user-guide/configuration/use-condarc.html">documentation</a> for more details):
<pre>
channels:
  - http://central.artipie.com/{{user}}/{{name}}
</pre>
Set Artipie repository url for upload to anaconda config:
<pre>
anaconda config --set url "http://central.artipie.com/{{user}}/{{name}}" -s
</pre>
You can also set automatic upload after building package:
<pre>
conda config --set anaconda_upload yes
</pre>

Now you can install packages from Artipie anaconda repository using <code>conda install</code>
command and build and upload packages with <code>conda build</code>, or, if the package is already build,
use <code>anaconda upload</code> command to publish package to Artipie.
{{/eq}}{{#eq type "npm"}}
To install or publish <code>npm</code> package into Artipie repository, specify the repository url
with the <code>--registry</code> option:
<pre>
    npm publish --registry=https://central.artipie.com/{{user}}/{{name}}
    npm install --registry=https://central.artipie.com/{{user}}/{{name}} <package name>
</pre>
{{/eq}}{{#eq type "npm"}}
Before uploading your gems, obtain a key for authorization. A base64 encoded
<code>login:password</code> would be a valid key:
<pre>
    export GEM_HOST_API_KEY=$(echo -n "{{user}}:****" | base64)
</pre>
Now, to upload <code>.gem</code> file into Artipie repository, use <code>gem push</code> command:
<pre>
    gem push <your_project.gem> --host https://central.artipie.com/{{user}}/{{name}}
</pre>
To install an existing <code>gem</code>, use <code>gem install</code> command:
<pre>
    gem install awesome_gem --source https://central.artipie.com/{{user}}/{{name}}
</pre>
{{/eq}}{{#eq type "nuget"}}
To install or publish <code>NuGet</code> package into Artipie, specify repository url
and credentials in <code>NuGet.Config</code> xml file:
<pre>
    <?xml version="1.0" encoding="utf-8"?>
    <configuration>
    <packageSources>
        <add key="artipie-repo" value="https://central.artipie.com/{{user}}/{{name}}/index.json" />
    </packageSources>
    <packageSourceCredentials>
        <artipie-nuget-test>
            <add key="Username" value="{{user}}"/>
            <add key="ClearTextPassword" value="****"/>
        </artipie-nuget-test>
    </packageSourceCredentials>
    </configuration>
</pre>
Then use this configuration when installing or publishing <code>NuGet</code> packages:
<pre>
nuget push ./nuget-package -ConfigFile ./NuGet.Config -Verbosity detailed -Source artipie-repo
nuget install Newtonsoft.Json -Version 12.0.3 -NoCache -ConfigFile ./NuGet.Config -Source artipie-repo
</pre>
{{/eq}}{{#eq type "helm"}}
To install chart from Artipie, add repository url to helm and run <code>helm install</code>:
<pre>
helm repo add artipie https://central.artipie.com/{{user}}/{{name}}
helm install my_chart artipie
</pre>
To upload chart, perform <code>POST</code> request:
<pre>
    curl -i -X POST --data-binary "@my-chart.tgz" https://central.artipie.com/{{user}}/{{name}}
</pre>
{{/eq}}

{{/partial}}
{{> base}}
